bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance)) + geom_line(aes(x=flexbility, y=train)) + geom_line(aes(x=flexbility, y=bias)) + geom_line(aes(x=flexbility, y=irreducible_err))
flexbility <- seq(from=1, to=10, by=0.01)
variance <- 4*exp(flexbility*0.04)-4
train <- 5*cos(0.4*flexbility+12) + 8
#test <-
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance)) + geom_line(aes(x=flexbility, y=train)) + geom_line(aes(x=flexbility, y=bias)) + geom_line(aes(x=flexbility, y=irreducible_err))
flexbility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexbility*0.1)-2
train <- 5*cos(0.4*flexbility+12) + 8
#test <-
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance)) + geom_line(aes(x=flexbility, y=train)) + geom_line(aes(x=flexbility, y=bias)) + geom_line(aes(x=flexbility, y=irreducible_err))
flexbility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexbility*0.1+2)-2
train <- 5*cos(0.4*flexbility+12) + 8
#test <-
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance)) + geom_line(aes(x=flexbility, y=train)) + geom_line(aes(x=flexbility, y=bias)) + geom_line(aes(x=flexbility, y=irreducible_err))
flexbility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexbility*0.1)-2
train <- 5*cos(0.4*flexbility+12) + 8
#test <-
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance)) + geom_line(aes(x=flexbility, y=train)) + geom_line(aes(x=flexbility, y=bias)) + geom_line(aes(x=flexbility, y=irreducible_err))
flexbility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexbility*0.1)-2
train <- 5*cos(0.4*flexbility+12) + 8
#test <-
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance, color='variance')) + geom_line(aes(x=flexbility, y=train, color='Train')) + geom_line(aes(x=flexbility, y=bias, color='Bias')) + geom_line(aes(x=flexbility, y=irreducible_err, color='Irreducible Error'))
flexbility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexbility*0.1)-2
train <- 5*cos(0.4*flexbility+12) + 8
test <- 5*cos(0.4*flexbility+20) + 12
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance, color='Variance')) + geom_line(aes(x=flexbility, y=train, color='Train')) + geom_line(aes(x=flexbility, y=bias, color='Bias')) + geom_line(aes(x=flexbility, y=irreducible_err, color='Irreducible Error'))
flexbility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexbility*0.1)-2
train <- 5*cos(0.4*flexbility+12) + 8
test <- 5*cos(0.4*flexbility+20) + 12
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance, color='Variance')) + geom_line(aes(x=flexbility, y=train, color='Train')) + geom_line(aes(x=flexbility, y=bias, color='Bias')) + geom_line(aes(x=flexbility, y=irreducible_err, color='Irreducible Error')) + geom_line(aes(x=flexbility, y=test, color='Test'))
flexbility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexbility*0.1)-2
train <- 5*cos(0.4*flexbility+12) + 8
test <- 5*cos(0.4*flexbility+20) + 16
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance, color='Variance')) + geom_line(aes(x=flexbility, y=train, color='Train')) + geom_line(aes(x=flexbility, y=bias, color='Bias')) + geom_line(aes(x=flexbility, y=irreducible_err, color='Irreducible Error')) + geom_line(aes(x=flexbility, y=test, color='Test'))
flexbility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexbility*0.1)-2
train <- 5*cos(0.4*flexbility+12) + 8
test <- 5*cos(0.4*flexbility+25) + 16
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance, color='Variance')) + geom_line(aes(x=flexbility, y=train, color='Train')) + geom_line(aes(x=flexbility, y=bias, color='Bias')) + geom_line(aes(x=flexbility, y=irreducible_err, color='Irreducible Error')) + geom_line(aes(x=flexbility, y=test, color='Test'))
flexbility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexbility*0.1)-2
train <- 5*cos(0.4*flexbility+12) + 8
test <- 5*cos(0.4*flexbility+25) + 14
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance, color='Variance')) + geom_line(aes(x=flexbility, y=train, color='Train')) + geom_line(aes(x=flexbility, y=bias, color='Bias')) + geom_line(aes(x=flexbility, y=irreducible_err, color='Irreducible Error')) + geom_line(aes(x=flexbility, y=test, color='Test'))
flexbility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexbility*0.1)-2
train <- 5*cos(0.4*flexbility+12) + 8
test <- 5*cos(0.4*flexbility+25) + 12
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance, color='Variance')) + geom_line(aes(x=flexbility, y=train, color='Train')) + geom_line(aes(x=flexbility, y=bias, color='Bias')) + geom_line(aes(x=flexbility, y=irreducible_err, color='Irreducible Error')) + geom_line(aes(x=flexbility, y=test, color='Test'))
flexbility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexbility*0.1)-2
train <- 5*cos(0.4*flexbility+12) + 8
test <- 5*cos(0.4*flexbility+25) + 12
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexbility, y=variance, color='Variance')) + geom_line(aes(x=flexbility, y=train, color='Train')) + geom_line(aes(x=flexbility, y=bias, color='Bias')) + geom_line(aes(x=flexbility, y=irreducible_err, color='Irreducible Error')) + geom_line(aes(x=flexbility, y=test, color='Test')) + ggtitle('MSE Values vs Flexbility') + theme(plot.title=element_text(hjust=0.5))
flexibility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexbility*0.1)-2
train <- 5*cos(0.4*flexbility+12) + 8
test <- 5*cos(0.4*flexbility+25) + 12
bias <- 4*cos(0.4*flexbility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexibility, y=variance, color='Variance')) + geom_line(aes(x=flexibility, y=train, color='Train')) + geom_line(aes(x=flexibility, y=bias, color='Bias')) + geom_line(aes(x=flexibility, y=irreducible_err, color='Irreducible Error')) + geom_line(aes(x=flexibility, y=test, color='Test')) + ggtitle('MSE Values vs Flexibility') + theme(plot.title=element_text(hjust=0.5))
flexibility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexibility*0.1)-2
train <- 5*cos(0.4*flexibility+12) + 8
test <- 5*cos(0.4*flexibility+25) + 12
bias <- 4*cos(0.4*flexibility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexibility, y=variance, color='Variance')) + geom_line(aes(x=flexibility, y=train, color='Train')) + geom_line(aes(x=flexibility, y=bias, color='Bias')) + geom_line(aes(x=flexibility, y=irreducible_err, color='Irreducible Error')) + geom_line(aes(x=flexibility, y=test, color='Test')) + ggtitle('MSE Values vs Flexibility') + theme(plot.title=element_text(hjust=0.5))
rm(list=lst9)
rm(list=lst())
rm(list=ls())
flexibility <- seq(from=1, to=10, by=0.01)
variance <- 2*exp(flexibility*0.1)-2
train <- 5*cos(0.4*flexibility+12) + 8
test <- 5*cos(0.4*flexibility+25) + 12
bias <- 4*cos(0.4*flexibility+12) + 5
irreducible_err <- 3
ggplot() + geom_line(aes(x=flexibility, y=variance, color='Variance')) + geom_line(aes(x=flexibility, y=train, color='Train')) + geom_line(aes(x=flexibility, y=bias, color='Bias')) + geom_line(aes(x=flexibility, y=irreducible_err, color='Irreducible Error')) + geom_line(aes(x=flexibility, y=test, color='Test')) + ggtitle('MSE Values vs Flexibility') + theme(plot.title=element_text(hjust=0.5))
library(MASS)
dat <- boston
?MASS
library(MASS)
dat <- Boston
library(MASS)
dat <- Boston
nrow(Boston)
ncol(Boston)
library(MASS)
dat <- Boston
nrow(Boston)
ncol(Boston)
?Boston
?Boston
pairs(Boston)
cor(Boston)
cor(Boston)["crim",]
cor(Boston)["crim", ]
ggplot(dat=Boston, aes(x=crim)) + geom_histogram(aes(y=..density..))
ggplot(dat=Boston, aes(x=crim)) + geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_density(alpha=.2, fill="#FF6666")
ggpairs(Boston)
ggpair(Boston)
library(GGally)
install.packages("GGally")
library(GGally)
ggpair(Boston)
library(GGally)
ggpairs(Boston)
ggplot(dat=Boston, aes(x=crim)) + geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_density(alpha=.2, fill="#FF6666") + ggtitle('Density Plot of Crim Rate') + theme(plot.title=element_text(hjust=0.5))
ggplot(dat=Boston, aes(x=crim)) + geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_density(alpha=.2, fill="#FF6666") + ggtitle('Density Plot of Crim Rate') + theme(plot.title=element_text(hjust=0.5))
range(crim)
ggplot(dat=Boston, aes(x=crim)) + geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_density(alpha=.2, fill="#FF6666") + ggtitle('Density Plot of Crim Rate') + theme(plot.title=element_text(hjust=0.5))
range(Boston$crim)
ggplot(dat=Boston, aes(x=crim)) + geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_density(alpha=.2, fill="#FF6666") + ggtitle('Density Plot of Crim Rate') + theme(plot.title=element_text(hjust=0.5))
range(Boston$crim)
ggplot(dat=Boston, aes(x=tax)) + geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_density(alpha=.2, fill="#FF6666") + ggtitle('Density Plot of Crim Rate') + theme(plot.title=element_text(hjust=0.5))
ggplot(dat=Boston, aes(x=tax)) + geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_density(alpha=.2, fill="#FF6666") + ggtitle('Density Plot of Crim Rate') + theme(plot.title=element_text(hjust=0.5))
ggplot(dat=Boston, aes(x=tax)) + geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_density(alpha=.2, fill="#FF6666") + ggtitle('Density Plot of Tax Rate') + theme(plot.title=element_text(hjust=0.5))
range(Boston$tax)
ggplot(dat=Boston, aes(x=ptration)) + geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_density(alpha=.2, fill="#FF6666") + ggtitle('Density Plot of Tax Rate') + theme(plot.title=element_text(hjust=0.5))
ggplot(dat=Boston, aes(x=ptratio)) + geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_density(alpha=.2, fill="#FF6666") + ggtitle('Density Plot of Tax Rate') + theme(plot.title=element_text(hjust=0.5))
range(Boston$ptratio)
sum(which(Boston$chars == 1))
length(which(Boston$chars == 1))
Boston$chars == 1
length(which(Boston$chars=1))
length(which(Boston$chas==1))
mean(Boston$ptratio)
sd(Boston$ptratio)
Boston[which(medv==max(Boston$medv))]
Boston[which(Boston$medv==max(Boston$medv))]
which(Boston$medv==max(Boston$medv))
Boston[162]
Boston{162}
Boston[,162]
Boston[162,]
Boston[which(Boston$medv==max(Boston$medv)),]
Boston[which(Boston$medv==max(Boston$medv)),]
range(Boston$age)
range(Boston$dis)
length(which(Boston$rm > 6))
length(which(Boston$rm > 8))
mean(Boston[which(Boston$rm > 8),])
Boston[which(Boston$rm > 8),]
apply(Boston[which(Boston$rm > 8),], mean)
apply(Boston[which(Boston$rm > 8),], 2, mean)
?apply
apply(Boston[which(Boston$rm > 8),], 2, mean)
apply(Boston[which(Boston$rm <= 8),], 2, mean)
apply(Boston[which(Boston$rm <= 8),], 2, mean)
above8 <- apply(Boston[which(Boston$rm > 8),], 2, mean)
rest <- apply(Boston[which(Boston$rm <= 8),], 2, mean)
above8 <- apply(Boston[which(Boston$rm > 8),], 2, mean)
rest <- apply(Boston[which(Boston$rm <= 8),], 2, mean)
above8
above8-rest
above8 <- apply(Boston[which(Boston$rm > 8),], 2, mean)
rest <- apply(Boston[which(Boston$rm <= 8),], 2, mean)
above8
above8 - apply(Boston[which(Boston$rm <= 8),], 2, mean)
?Boston
install.packages("tinytex")
knitr::opts_chunk$set(echo = TRUE)
sample_size <- 12
N <- 10000
ts <- rep(0, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=522)
ts[i] <- t.test(sim_dat, mu=240)$p.value
}
t.test(chickwts[chickwts$feed=="linseed",1], mu = 240)
clc
mydat <- read.table('ozone.txt', sep='\t')
pwd
pwd()
getwd()
setwd('/Users/Johnnia/SchoolWorks/2018Spring/STAT403')
mydat <- read.table('ozone.txt', sep='/t')
mydat <- read.table('ozone.txt', sep='\t')
sample_size <- 12
N <- 10000
ts <- rep(0, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=522)
ts[i] <- t.test(sim_dat, mu=240)$p.value
}
power <- length(ts[ts<0.1])/length(ts)
sample_size <- 12
N <- 10000
ts <- rep(0, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=522)
ts[i] <- t.test(sim_dat, mu=240)$p.value
}
print(paste("The power of under alpha=10% is ", length(ts[ts<0.1])/length(ts))
sample_size <- 12
N <- 10000
ts <- rep(0, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=522)
ts[i] <- t.test(sim_dat, mu=240)$p.value
}
print(paste("The power of under alpha=10% is ", length(ts[ts<0.1])/length(ts)))
sample_size <- 12
N <- 10000
ts <- rep(0, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=522)
ts[i] <- t.test(sim_dat, mu=240)$p.value
}
print(paste("The power of under alpha=10% is ", length(ts[ts<=0.1])/length(ts)))
sample_size <- 12
N <- 10000
ts <- rep(0, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=522)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
mean(ts[i])
#print(paste("The power of under alpha=10% is ", length(ts[ts<=0.1])/length(ts)))
sample_size <- 12
N <- 10000
ts <- rep(0, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=522)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
mean(ts)
#print(paste("The power of under alpha=10% is ", length(ts[ts<=0.1])/length(ts)))
sample_size <- 12
N <- 10000
set.seed(403)
ts <- rep(0, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=522)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
mean(ts)
#print(paste("The power of under alpha=10% is ", length(ts[ts<=0.1])/length(ts)))
sample_size <- 12
N <- 10000
set.seed(403)
ts <- rep(0, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=522)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
length(ts[ts==1])/N
#print(paste("The power of under alpha=10% is ", length(ts[ts<=0.1])/length(ts)))
sample_size <- 12
N <- 10000
set.seed(403)
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=522)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
length(ts[ts==1])/N
#print(paste("The power of under alpha=10% is ", length(ts[ts<=0.1])/length(ts)))
sample_size <- 12
N <- 10000
set.seed(403)
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
length(ts[ts==1])/N
#print(paste("The power of under alpha=10% is ", length(ts[ts<=0.1])/length(ts)))
sample_size <- 12
N <- 10000
set.seed(403)
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
print(paste("The power of under alpha=10% is ", mean(ts)))
sample_size <- 12
N <- 10000
set.seed(403)
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
print(paste("The power of under $\alpha=10%$ is ", mean(ts)))
ns <- list(12, 24, 36)
ns <- 12 * 1:5
ns <- 12 * 1:9
ns
ns <- 12 * 1:8
for (n in ns) {
sample_size <- n
N <- 10000
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
print(paste("The power of under alpha=10% at n=", n, "is ", mean(ts)))
}
ns <- 12 * 1:8
for (n in ns) {
sample_size <- n
N <- 10000
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
print(paste("The power of under alpha=10% at n =", n, "is ", mean(ts)))
}
n <- 12 * 1:8
for (k in 1:length(n)) {
sample_size <- n[k]
N <- 10000
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[k,i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
print(paste("The power of under alpha=10% at n =", n[k], "is ", mean(ts[k,])))
}
n <- 12 * 1:8
N <- 10000
ts <- matrix(0, length(n), N)
for (k in 1:length(n)) {
sample_size <- n[k]
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[k,i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
print(paste("The power of under alpha=10% at n =", n[k], "is ", mean(ts[k,])))
}
library(ggplot2)
ggplot() + geom_line(aes(x=n, y=mean(ts[1:8,])))
n <- 12 * 1:8
powers <- rep(NA, n)
n <- 12 * 1:8
powers <- rep(0, n)
n <- 12 * 1:8
powers <- rep(NA, length(n))
for (k in 1:length(n)) {
sample_size <- n[k]
N <- 10000
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
powers <- mean(ts)
print(paste("The power of under alpha=10% at n =", n[k], "is ", powers[k]))
}
n <- 12 * 1:8
powers <- rep(NA, length(n))
for (k in 1:length(n)) {
sample_size <- n[k]
N <- 10000
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
powers[k] <- mean(ts)
print(paste("The power of under alpha=10% at n =", n[k], "is ", powers[k]))
}
library(ggplot2)
ggplot() + geom_line(aes(x=n, y=powers))
library(ggplot2)
ggplot() + geom_line(aes(x=n, y=powers)) +
ggtitle('Power of the t-tests under a significant level of 10%') +
theme(plot.title = element_text(hjust = 0.5))
sample_size <- 20
N <- 10000
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
sd(ts)
sample_size <- 20
N <- 10000
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[i] <- mean(t.test(sim_dat, mu=240)$p.value<=0.1)
}
sd(ts)
sample_size <- 20
N <- 10000
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[i] <- t.test(sim_dat, mu=240)$p.value<=0.1
}
powers <- mean(ts)
sd(powers)
sample_size <- 20
N <- 10000
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts <- mean(sim_dat)
}
sd(ts)
sample_size <- 20
N <- 10000
ts <- rep(NA, N)
for (i in 1:N) {
sim_dat <- rnorm(sample_size, mean=220, sd=52)
ts[i] <- mean(sim_dat)
}
sd(ts)
sample_size <- 20
N <- 10000
eval <- rep(NA, N)
for (i in 1:N) {
sim_dat <- runif(0,1)
eval[i] <- mean(sim_dat)
}
sd(eval)
sample_size <- 20
N <- 10000
eval <- rep(NA, N)
for (i in 1:N) {
sim_dat <- runif(sample_size,0,1)
eval[i] <- mean(sim_dat)
}
sd(eval)
sample_size <- 20
N <- 10000
eval <- rep(NA, N)
for (i in 1:N) {
sim_dat <- runif(sample_size, 0, 1)
eval[i] <- mean(sim_dat)
}
sd(eval)
sample_size <- 20
N <- 10000
eval <- rep(NA, N)
for (i in 1:N) {
sim_dat <- runif(sample_size)
eval[i] <- mean(sim_dat)
}
sd(eval)
sample_size <- 20
N <- 10000
f_target = function(x){
return(1/(1+exp(x^2)))
}
mean_eva4 = rep(NA, N)
for(i_rep in 1:N){
X4 = rnorm(sample_size, sd=0.9)
eva4 = f_target(X4)/dnorm(X4, sd=0.9)
mean_eva4[i_rep] = mean(eva4)
}
sd(mean_eva4)
ssd <- sd(rnorm(100,0,2))
N=10000
for (i in 1:N) {}
for (i in 1:N) {
}
sds <- rep(0, N)
for (i in 1:N) {}
for (i in 1:N) {
sds[i] <- sd(rnorm(100,0,2))
}
mean(sds)
ggplot() + geom_histogram(aes(sds))
