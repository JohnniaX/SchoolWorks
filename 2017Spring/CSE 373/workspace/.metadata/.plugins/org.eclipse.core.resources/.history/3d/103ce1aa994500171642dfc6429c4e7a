import java.util.Iterator;

public abstract class AVLTester {

	public static boolean verifyAVL(StringTree toTest){
		// TODO Return true if toTest is an AVL implementation of a String tree and false otherwise. 
		// All StringTree interface methods must behave correctly
		// You may assume that size() and isEmpty() return the correct values
		if (toTest.size() <= 1) {
			return true;
		}
		// AVL has two conditions, BST and balanced
		// First check if the tree is BST, then check if the BST is balance
		return isBinary(toTest) && isBalanced(toTest);
	}
	
	// Check if the given StringTree is a BST
	private static boolean isBinary(StringTree toTest) {
		Iterator<String> it = toTest.getBFSIterator();
		// Create a linked list for comparing the runtime with the given tree
		list<String> list = new list<String>();
		while(it.hasNext()) {
			list.add(it.next());
		}
		// Compare the total runtime of finding all elements
		// Binary Tree should give a smaller runtime(at most equal)
		it = toTest.getBFSIterator();
		long startTime = System.nanoTime();
		while(it.hasNext()) {
			toTest.find(it.next());
		}
		long endTime = System.nanoTime();
		long treeTime = endTime - startTime;
		it = toTest.getBFSIterator();
		startTime = System.nanoTime();
		while(it.hasNext()) {
			list.find(it.next());
		}
		endTime = System.nanoTime();
		long listTime = endTime - startTime;
		return treeTime <= listTime;
	}
	
	// Check if the tree is balanced
	private static boolean isBalanced(StringTree toTest) {
		Iterator<String> it = toTest.getBFSIterator();
		BST dict = new BST();
		while (it.hasNext()) {
			dict.insert(it.next());
		}
		return dict.isBalanced();
	}
}