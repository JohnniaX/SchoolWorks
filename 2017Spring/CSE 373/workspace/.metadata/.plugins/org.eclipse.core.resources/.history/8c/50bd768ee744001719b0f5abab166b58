import java.util.Iterator;

public abstract class AVLTester {

	public static boolean verifyAVL(StringTree toTest){
		// TODO Return true if toTest is an AVL implementation of a String tree and false otherwise. 
		// All StringTree interface methods must behave correctly
		// You may assume that size() and isEmpty() return the correct values
		// Other than this, do not assume anything about the tree toTest, including its start size.
		Iterator<String> it = toTest.getBFSIterator();
		while (it.hasNext()) {
			
			String next = it.next();
		}
		return true;
	}
	
	// You may use as many static helper functions as you think are necessary
	private class Tree {
		private class TreeNode {
			TreeNode left;
			TreeNode right;
			String dat;
			public TreeNode(String dat) {
				this(dat, null, null);
			}
			public TreeNode(String dat, TreeNode left, TreeNode right) {
				this.left = left;
				this.right = right;
				this.dat = dat;
			}
		}
		
		private TreeNode root;
		public Tree() {
			this.root = null;
		}
		public void build(Iterator<String> it) {
			TreeNode cur = root;
			TreeNode next = cur;
			while (it.hasNext()) {
				if (cur == null) {
					cur = new TreeNode(it.next());
				} else {
					if (cur.left != null && cur.right != null) {
						cur = cur.left;
					} else {
						cur.left = new TreeNode(it.next());
						cur.right = new TreeNode(it.next());
					}
				}				
			}
		}
	}
}
