fit <- summary(fit.sub)
cp <- ggplot() + geom_line(aes(1:7, fit$cp), col='violetred1') +
geom_point(aes(1:7, fit$cp), col='cornflowerblue') +
geom_point(aes(which.min(fit$cp),
fit$cp[which.min(fit$cp)]),
col='cornflowerblue', shape=4, size=3) +
ylab('C_p') + xlab('Number of predictors')
bic <- ggplot() + geom_line(aes(1:7, fit$bic), col='violetred1') +
geom_point(aes(1:7, fit$bic), col='cornflowerblue') +
geom_point(aes(which.min(fit$bic),
fit$bic[which.min(fit$bic)]),
col='cornflowerblue', shape=4, size=3) +
ylab('BIC') + xlab('Number of predictors')
r2 <- ggplot() + geom_line(aes(1:7, fit$adjr2), col='violetred1') +
geom_point(aes(1:7, fit$adjr2), col='cornflowerblue') +
geom_point(aes(which.max(fit$adjr2),
fit$adjr2[which.max(fit$adjr2)]),
col='cornflowerblue', shape=4, size=4) +
ylab('Adjusted R^2') + xlab('Number of predictors')
grid.arrange(cp,bic,r2,nrow=1)
cp <- coef(fit.sub, which.min(fit$cp))
bic <- coef(fit.sub, which.min(fit$bic))
adjr2 <- coef(fit.sub, which.max(fit$adjr2))
output <- matrix(0, 3, 8)
colnames(output) <-
c('(Intercept)','X1','X2','X3','X4','X5','X6','X7')
rownames(output) <- c('C_p', 'BIC', 'Adjusted R^2')
output['C_p',names(cp)] <- cp
output['BIC',names(bic)] <- bic
output['Adjusted R^2',names(adjr2)] <- adjr2
print(output)
fit.sub <- regsubsets(data=dat, Y~., method='forward')
fit <- summary(fit.sub)
cp <- ggplot() + geom_line(aes(1:7, fit$cp), col='violetred1') +
geom_point(aes(1:7, fit$cp), col='cornflowerblue') +
geom_point(aes(which.min(fit$cp),
fit$cp[which.min(fit$cp)]),
col='cornflowerblue', shape=4, size=3) +
ylab('C_p') + xlab('Number of predictors')
bic <- ggplot() + geom_line(aes(1:7, fit$bic), col='violetred1') +
geom_point(aes(1:7, fit$bic), col='cornflowerblue') +
geom_point(aes(which.min(fit$bic),
fit$bic[which.min(fit$bic)]),
col='cornflowerblue', shape=4, size=3) +
ylab('BIC') + xlab('Number of predictors')
r2 <- ggplot() + geom_line(aes(1:7, fit$adjr2), col='violetred1') +
geom_point(aes(1:7, fit$adjr2), col='cornflowerblue') +
geom_point(aes(which.max(fit$adjr2),
fit$adjr2[which.max(fit$adjr2)]),
col='cornflowerblue', shape=4, size=4) +
ylab('Adjusted R^2') + xlab('Number of predictors')
grid.arrange(cp,bic,r2,nrow=1)
cp <- coef(fit.sub, which.min(fit$cp))
bic <- coef(fit.sub, which.min(fit$bic))
adjr2 <- coef(fit.sub, which.max(fit$adjr2))
output <- matrix(0, 3, 8)
colnames(output) <-
c('(Intercept)','X1','X2','X3','X4','X5','X6','X7')
rownames(output) <- c('C_p', 'BIC', 'Adjusted R^2')
output['C_p',names(cp)] <- cp
output['BIC',names(bic)] <- bic
output['Adjusted R^2',names(adjr2)] <- adjr2
print(output)
fit.sub <- regsubsets(data=dat, Y~., method='backward')
fit <- summary(fit.sub)
cp <- ggplot() + geom_line(aes(1:7, fit$cp), col='violetred1') +
geom_point(aes(1:7, fit$cp), col='cornflowerblue') +
geom_point(aes(which.min(fit$cp),
fit$cp[which.min(fit$cp)]),
col='cornflowerblue', shape=4, size=3) +
ylab('C_p') + xlab('Number of predictors')
bic <- ggplot() + geom_line(aes(1:7, fit$bic), col='violetred1') +
geom_point(aes(1:7, fit$bic), col='cornflowerblue') +
geom_point(aes(which.min(fit$bic),
fit$bic[which.min(fit$bic)]),
col='cornflowerblue', shape=4, size=3) +
ylab('BIC') + xlab('Number of predictors')
r2 <- ggplot() + geom_line(aes(1:7, fit$adjr2), col='violetred1') +
geom_point(aes(1:7, fit$adjr2), col='cornflowerblue') +
geom_point(aes(which.max(fit$adjr2),
fit$adjr2[which.max(fit$adjr2)]),
col='cornflowerblue', shape=4, size=4) +
ylab('Adjusted R^2') + xlab('Number of predictors')
grid.arrange(cp,bic,r2,nrow=1)
cp <- coef(fit.sub, which.min(fit$cp))
bic <- coef(fit.sub, which.min(fit$bic))
adjr2 <- coef(fit.sub, which.max(fit$adjr2))
output <- matrix(0, 3, 8)
colnames(output) <-
c('(Intercept)','X1','X2','X3','X4','X5','X6','X7')
rownames(output) <- c('C_p', 'BIC', 'Adjusted R^2')
output['C_p',names(cp)] <- cp
output['BIC',names(bic)] <- bic
output['Adjusted R^2',names(adjr2)] <- adjr2
print(output)
X <- matrix(NA, 1000, 101)
for (i in 1:1000) {
xi <- rnorm(100,mean=0,sd=1)
noise <- rnorm(1,mean=0,sd=1)
X[i] <- c(xi, noise)
}
head(X)
c[1,101]
X[1,101]
X[1,102]
X[1] <- cbind(xi, noise)
xi
noise
rbind(xi, noise)
cbind(xi, noise)
c(xi, noise)
X[1] <- rep(0, 101)
X <- matrix(NA, 1000, 101)
for (i in 1:1000) {
xi <- rnorm(100,mean=0,sd=1)
noise <- rnorm(1,mean=0,sd=1)
X[i,] <- c(xi, noise)
}
head(X)
X <- matrix(NA, 1000, 100)
noise <- rep(NA, 1000)
for (i in 1:1000) {
noise[i] <- rnorm(1,mean=0,sd=1)
X[i,] <- rnorm(100,mean=0,sd=1)
}
Y <- 0*X + noise
View(Y)
X[1:10,1:10]
Y <- rep(NA,1000)
for (i in 1:1000) {
Y[i] <- 0*X[i,] + noise[i]
}
X[1,]
m <- c(1,2,3)
m * 0
m <- c(c(1,2,3), c(4,5,6))
View(X)
Y <- rep(0,1000)
for (i in 1:1000) {
Y[i] <- 0*X[i,] + noise[i]
}
Y <- rep(0,1000)
for (i in 1:1000) {
Y[i,] <- 0*X[i,] + noise[i]
}
Y <- rep(0,1000)
for (i in 1:1000) {
Y[i] <- sum(0*X[i,]) + noise[i]
}
Y <- rep(0,1000)
for (i in 1:1000) {
Y[i] <- sum(0*X[i,]) + noise[i]
}
dat <- data.frame(X,Y)
View(dat)
pvalue <- rep(NA,100)
for (i in 1:100) {
pvalue[i] <- (summary(lm(data=dat, Y~paste0('X',i))))$coef[,4]
}
lm(dat, Y~X1)
dat$X1
lm(dat, Y~X1)
lm(dat$Y~dat$X10)
lm(dat,Y~X10)
lm(dat,Y~'X10')
lm(dat,Y~(X10))
pvalue <- rep(NA,100)
for (i in 1:100) {
pvalue[i] <- (summary(lm(Y~X[,i])))$coef[,4]
}
lm(Y~X[,1])$coef[,4]
Y <- rep(0,1000)
for (i in 1:1000) {
Y[i] <- sum(0*X[i,]) + noise[i]
}
pvalue <- rep(NA,100)
for (i in 1:100) {
pvalue[i] <- (summary(lm(Y~X[,i])))$coef[,4]
}
Y
pvalue <- rep(NA,100)
for (i in 1:100) {
pvalue[i] <- (summary(lm(Y~X[1:1000,i])))$coef[,4]
}
pvalue <- rep(NA,100)
for (i in 1:100) {
pvalue[i] <- (summary(lm(Y[1:1000]~X[,i])))$coef[,4]
}
pvalue <- rep(NA,100)
for (i in 1:100) {
pvalue[i] <- (summary(lm(Y[1:1000]~X[1:1000,i])))$coef[,4]
}
(summary(lm(Y~X[,1])))$coef[,4]
(summary(lm(Y~X[,1])))
(summary(lm(Y~X[,1])))$coef[,5]
(summary(lm(Y~X[,1])))$coef[,3]
(summary(lm(Y~X[,1])))$coef[,1]
(summary(lm(Y~X[,1])))$coef[,5]
(summary(lm(Y~X[,1])))$coef[,4]
(summary(lm(Y~X[,1])))
(summary(lm(Y~X[,1])))$coef[,4]
(summary(lm(Y~X[,1])))$coef[,4][2]
pvalue <- rep(NA,100)
for (i in 1:100) {
pvalue[i] <- (summary(lm(Y~X[,i])))$coef[,4][2]
}
pvalue <- rep(NA,100)
for (i in 1:100) {
pvalue[i] <- (summary(lm(Y~X[,i])))$coef[,4][2]
}
ggplot() + geom_histogram(aes(pvalue))
pvalue <- rep(NA,100)
for (i in 1:100) {
pvalue[i] <- (summary(lm(Y~X[,i])))$coef[,4][2]
}
ggplot() + geom_histogram(aes(pvalue),
bins=50,
color="black",
fill="cornsilk3") +
xlab('pvalue') + ylab('') +
ggtitle('Histogram of p-value') +
theme(plot.title = element_text(hjust = 0.5))
pvalue <- rep(NA,100)
for (i in 1:100) {
pvalue[i] <- (summary(lm(Y~X[,i])))$coef[,4][2]
}
p <- ggplot() + geom_histogram(aes(pvalue),
bins=50,
color="black",
fill="cornsilk3") +
xlab('pvalue') + ylab('') +
ggtitle('Histogram of p-value') +
theme(plot.title = element_text(hjust = 0.5))
p
?dnorm
dunif
?dunif
xx <- seq(0,1,0.01)
ggplot() + geom_histogram(aes(pvalue,
y=..density..),
bins=50,
color="black",
fill="cornsilk3") +
xlab('pvalue') + ylab('') +
ggtitle('Histogram of p-value') +
theme(plot.title = element_text(hjust = 0.5)) + geom_line(aes(xx, dunif(xx)))
xx <- seq(0,1,0.01)
ggplot() + geom_histogram(aes(pvalue,
y=..density..),
bins=50,
color="black",
fill="cornsilk3") +
xlab('pvalue') + ylab('') +
ggtitle('Histogram of p-value') +
theme(plot.title = element_text(hjust = 0.5)) + geom_line(aes(xx, dunif(xx)))
pvalue <- rep(NA,100)
for (i in 1:100) {
pvalue[i] <- (summary(lm(Y~X[,i])))$coef[,4][2]
}
ggplot() + geom_histogram(aes(pvalue),
bins=50,
color="black",
fill="cornsilk3") +
xlab('pvalue') + ylab('') +
ggtitle('Histogram of p-value') +
theme(plot.title = element_text(hjust = 0.5))
fit.sub <- regsubsets(Y~X, method='forward')
dat <- data.frame(X,Y)
fit.sub <- regsubsets(dat, Y~., method='forward')
View(dat)
length(Y)
length(X)
dat <- data.frame(X,Y)
fit.coef <- matrix(NA,1000,100)
for (i in 1:1000) {
fit <- regsubsets(dat, Y[i]~X[i,], method='forward')
fit.coef[i,] <- coef(fit, which.min(summary(fit)$bic))
}
length(X[1,])
knitr::opts_chunk$set(echo = TRUE)
dat <- iris
View(dat)
dat <- iris
lm.model <- lm(data=dat, Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length)
lm.model$coefficients
dat <- iris
lm.model <- lm(data=dat, Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length)
lm.model$coefficients
nrow(dat)
length(dat$Petal.Length)
B <- 10000
n <- nrow(dat)
empirical_BT_coef <- matrix(NA, nrow=B, ncol=4)
residual_BT_coef <- matrix(NA, nrow=B, ncol=4)
wild_BT_coef <- matrix(NA, nrow=B, ncol=4)
y_pred <- predict(lm.model)
set.seed(403)
for (i in 1:B) {
w <- sample(n,n,replace=T)
dat_BT <- dat[w,]
# empirical BT
em.model <- lm(data=dat_BT, Petal.Width ~
Sepal.Length + Sepal.Width + Petal.Length)
empirical_BT_coef[i,] <- em.model$coefficients
# residual BT
res.y_BT <- y_pred + lm.model$residuals[w]
res.dat_BT <- data.frame(Sepal.Length=dat$Sepal.Length,
Sepal.Width=dat$Sepal.Width,
Petal.Length=dat$Petal.Length,
Petal.Width=res.y_BT)
res.model <- lm(data=res.dat_BT, Petal.Width ~
Sepal.Length + Sepal.Width + Petal.Length)
residual_BT_coef[i,] <- res.model$coefficients
# wild BT
wild.y_BT <- y_pred + lm.model$residuals*rnorm(n)
wild.dat_BT <- data.frame(Sepal.Length=dat$Sepal.Length,
Sepal.Width=dat$Sepal.Width,
Petal.Length=dat$Petal.Length,
Petal.Width=wild.y_BT)
wild.model <- lm(data=wild.dat_BT, Petal.Width ~
Sepal.Length + Sepal.Width + Petal.Length)
wild_BT_coef[i,] <- wild.model$coefficients
}
coef_table <- matrix(NA, nrow=3, ncol=4)
colnames(coef_table) <- c('(Intercept)', 'Sepal.Length', 'Sepal.Width', 'Petal.Length')
rownames(coef_table) <- c('Empirical BT', 'Residual BT', 'Wild BT')
coef_table[1,] <- var(empirical_BT_coef)
coef_table <- matrix(NA, nrow=3, ncol=4)
colnames(coef_table) <- c('(Intercept)', 'Sepal.Length', 'Sepal.Width', 'Petal.Length')
rownames(coef_table) <- c('Empirical BT', 'Residual BT', 'Wild BT')
for (i in 1:4) {
coef_table[1,i] <- var(empirical_BT_coef[,i])
coef_table[2,i] <- var(residual_BT_coef[,i])
coef_table[3,i] <- var(wild_BT_coef[,i])
}
coef_table <- matrix(NA, nrow=3, ncol=4)
colnames(coef_table) <- c('(Intercept)', 'Sepal.Length', 'Sepal.Width', 'Petal.Length')
rownames(coef_table) <- c('Empirical BT', 'Residual BT', 'Wild BT')
for (i in 1:4) {
coef_table[1,i] <- var(empirical_BT_coef[,i])
coef_table[2,i] <- var(residual_BT_coef[,i])
coef_table[3,i] <- var(wild_BT_coef[,i])
}
coef_table
coef_table <- matrix(NA, nrow=3, ncol=4)
colnames(coef_table) <- c('(Intercept)', 'Sepal.Length', 'Sepal.Width', 'Petal.Length')
rownames(coef_table) <- c('Empirical BT', 'Residual BT', 'Wild BT')
for (i in 1:4) {
coef_table[1,i] <- var(empirical_BT_coef[,i])
coef_table[2,i] <- var(residual_BT_coef[,i])
coef_table[3,i] <- var(wild_BT_coef[,i])
}
coef_table
library(ggplot2)
inter_coef <- data.frame(empirical=coef_table[1,1],
residual=coef_table[2,1],
wild=coef_table[3,1])
View(inter_coef)
library(ggplot2)
inter_coef <- data.frame(empirical=empirical_BT_coef[,1],
residual=residual_BT_coef[,1],
wild=wild_BT_coef[,1])
View(inter_coef)
library(ggplot2)
inter_coef <- data.frame(empirical=empirical_BT_coef[,1],
residual=residual_BT_coef[,1],
wild=wild_BT_coef[,1])
ggplot(inter_coef, aes(fill=c('1','2','3'))) + geom_histogram()
library(ggplot2)
inter_coef <- data.frame(empirical=empirical_BT_coef[,1],
residual=residual_BT_coef[,1],
wild=wild_BT_coef[,1])
ggplot(inter_coef) + geom_histogram(bins=50)
a <- data.frame(c(1,2,3))
a
library(ggplot2)
empirical <- data.frame(intercept=empirical_BT_coef[,1])
residual <- data.frame(intercept=residual_BT_coef[,1])
wild <- data.frame(intercept=wild_BT_coef[,1])
empirical$type <- 'empirical'
residual$type <- 'residual'
wild$type <- 'wild'
intercept_coef <- rbind(empitical, residual, wild)
library(ggplot2)
empirical <- data.frame(intercept=empirical_BT_coef[,1])
residual <- data.frame(intercept=residual_BT_coef[,1])
wild <- data.frame(intercept=wild_BT_coef[,1])
empirical$type <- 'empirical'
residual$type <- 'residual'
wild$type <- 'wild'
intercept_coef <- rbind(empirical, residual, wild)
ggplot(intercept_coef, aes(intercept, fill=type)) + geom_histogram(bins=50)
library(ggplot2)
empirical <- data.frame(intercept=empirical_BT_coef[,1])
residual <- data.frame(intercept=residual_BT_coef[,1])
wild <- data.frame(intercept=wild_BT_coef[,1])
empirical$type <- 'empirical'
residual$type <- 'residual'
wild$type <- 'wild'
intercept_coef <- rbind(empirical, residual, wild)
ggplot(intercept_coef, aes(intercept, fill=type)) +
geom_histogram(bins=50, color="black") +
ggtitle('Distribution of intercept') +
theme(plot.title = element_text(hjust = 0.5))
knitr::opts_chunk$set(echo = TRUE)
setwd("C:\Users\johnn\Documents\UW\SchoolWorks\2018Spring\STAT403\HW7")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/johnn/Documents/UW/SchoolWorks/2018Spring/STAT403/HW7")
?glm
dat <- read.csv("binary.csv")
glm.model <- glm(data=dat, admit ~ gpa + gre, family='binomial')
B <- 10000
n <- nrow(dat)
parametric_BT_coef <- matrix(NA, nrow=B, ncol=3)
empirical_BT_coef <- matrix(NA, nrow=B, ncol=3)
set.seed(403)
for (i in 1:B) {
# parametric BT
y_BT <- rbinom(n, size=1,
prob=predict(glm.model, type='response'))
para.dat_BT <- data.frame(admit=y_BT, gpa=dat$gpa, gre=dat$gre)
parametric.model <- glm(data=para.dat_BT, admit ~ gpa + gre, family='binomial')
parametric_BT_coef[i,] <- parametric.model$coefficients
# empirical BT
w <- sample(n,n,replace=T)
em.dat_BT <- dat[w,]
em.model <- glm(data=em.dat_BT, admit ~ gpa + gre, family='binomial')
empirical_BT_coef[i,] <- em.model$coefficients
}
parametric_BT_coef
gpa_coef <- parametric_BT_coef[,2]
CI <- c(mean(gpa_coef)-qnorm(0.95)*sd(gpa_coef),
mean(gpa_coef)+qnorm(0.95)*sd(gpa_coef))
print(paste('The 90% CI is ', CI))
gpa_coef <- parametric_BT_coef[,2]
CI <- c(mean(gpa_coef)-qnorm(0.95)*sd(gpa_coef),
mean(gpa_coef)+qnorm(0.95)*sd(gpa_coef))
print(paste('The 90% CI is [', CI[1], ',', CI[2], ']'))
gpa_coef <- parametric_BT_coef[,2]
CI <- c(mean(gpa_coef)-qnorm(0.95)*sd(gpa_coef),
mean(gpa_coef)+qnorm(0.95)*sd(gpa_coef))
print(paste('The 90% CI is [', CI[1], ',', CI[2], ']'))
sd_table <- matrix(NA, nrow=3, ncol=3)
colnames(sd_table) <- c('(Intercept)', 'gpa', 'gre')
rownames(sd_table) <- c('Parametric', 'Empirical', 'summary()')
for (i in 1:3) {
sd_table[1,i] <- sd(parametric_BT_coef[,i])
sd_table[2,i] <- sd(empirical_BT_coef[,i])
}
sd_table[3,] <- summary(glm.model)$coefficients[, 'Std.Error']
sd_table <- matrix(NA, nrow=3, ncol=3)
colnames(sd_table) <- c('(Intercept)', 'gpa', 'gre')
rownames(sd_table) <- c('Parametric', 'Empirical', 'summary()')
for (i in 1:3) {
sd_table[1,i] <- sd(parametric_BT_coef[,i])
sd_table[2,i] <- sd(empirical_BT_coef[,i])
}
sd_table[3,] <- summary(glm.model)$coefficients[, 'Std. Error']
sd_table <- matrix(NA, nrow=3, ncol=3)
colnames(sd_table) <- c('(Intercept)', 'gpa', 'gre')
rownames(sd_table) <- c('Parametric', 'Empirical', 'summary()')
for (i in 1:3) {
sd_table[1,i] <- sd(parametric_BT_coef[,i])
sd_table[2,i] <- sd(empirical_BT_coef[,i])
}
sd_table[3,] <- summary(glm.model)$coefficients[, 'Std. Error']
sd_table
gpa_coef <- parametric_BT_coef[,2]
CI <- c(mean(gpa_coef)-qnorm(0.95)*sd(gpa_coef),
mean(gpa_coef)+qnorm(0.95)*sd(gpa_coef))
print(paste('The 90% CI is [', CI[1], ',', CI[2], ']'))
quantile(gpa_coef, probs=c(0.05,0.95))
quantile(gpa_coef, probs=c(0.05,0.95))[1]
quantile(gpa_coef, probs=c(0.05,0.95))[2,1]
quantile(gpa_coef, probs=c(0.05,0.95))[1]
gpa_coef <- parametric_BT_coef[,2]
CI <- quantile(gpa_coef, probs=c(0.05,0.95))
#CI <- c(mean(gpa_coef)-qnorm(0.95)*sd(gpa_coef),
#mean(gpa_coef)+qnorm(0.95)*sd(gpa_coef))
print(paste('The 90% CI is [', CI[1], ',', CI[2], ']'))
gpa_coef <- parametric_BT_coef[,2]
CI <- quantile(gpa_coef, probs=c(0.05,0.95))
print(paste('The 90% CI is [', CI[1], ',', CI[2], ']'))
B <- 10000
lambda <- rep(NA, B)
dat1 <- data.frame(gpa=3.7, gre=500)
dat1
B <- 10000
lambda <- rep(NA, B)
dat1 <- data.frame(gpa=3.7, gre=500)
for (i in 1:B) {
w <- sample(n,n,replace=T)
em.dat_BT <- dat[w,]
em.model <- glm(data=em.dat_BT, admit ~ gpa + gre, family='binomial')
lambda[i] <- predict(em.model, newdata=dat1, type='response')
}
CI <- quantile(lambda, probs=c(0.05,0.95))
print(paste('The 90% CI is [', CI[1], ',', CI[2], ']'))
B <- 10000
difference <- rep(NA, B)
john <- data.frame(gpa=2.3, gre=700)
sam <- data.frame(gpa=3.9, gre=670)
for (i in 1:B) {
w <- sample(n,n,replace=T)
dat_BT <- dat[w,]
model <- glm(data=dat_BT, admit ~ gpa + gre, family='binomial')
john.pred <- predict(model, newdata=john, type='response')
sam.pred <- predict(model, newdata=sam, type='response')
difference[i] <- john.pred - sam.pred
}
CI <- quantile(difference, probs=c(0.05,0.95))
print(paste('The 90% CI of the difference between John and Sam is [', CI[1], ',', CI[2], ']'))
