matrix(rnorm(100*20),100,20)
m <- matrix(rnorm(100*20),100,20)
dim(m)
dim(rnorm(10))
y <- rnorm(100)
dim(y)
length(y)
size(train[,75])
length(train[,75])
dim(train[,-75])
library(glmnet)
lambda <- 10^seq(10,-2,length.out=100)
glmnet(x=as.matrix(train[,-75]), y=train[,75])
library(glmnet)
lambda <- 10^seq(10,-2,length.out=100)
glmnet(data=train, Earnings.Per.Share~.)
set.seed(435)
train.index <- sample(nrow(dat),50)
train <- dat[train.index,]
test <- dat[-train.index,]
test.eps <- test$Earnings.Per.Share
print(paste('n_train=', dim(train)[1]))
print(paste('p_train=', dim(train)[2]))
library(glmnet)
lambda <- 10^seq(10,-2,length.out=100)
glmnet(data=train, Earnings.Per.Share~.)
library(glmnet)
lambda <- 10^seq(10,-2,length.out=100)
glmnet(Earnings.Per.Share~., data=train)
library(glmnet)
lambda <- 10^seq(10,-2,length.out=100)
glmnet(Earnings.Per.Share~ ., data=train)
library(glmnet)
lambda <- 10^seq(10,-2,length.out=100)
attach(train)
glmnet(Earnings.Per.Share~ .)
library(glmnet)
lambda <- 10^seq(10,-2,length.out=100)
glmnet(Earnings.Per.Share ~ ., data=train)
devtools
install.packages('devtools')
library(devtools)
install_github("hong-revo/glmnetUtils")
library(glmnet)
library(glmnetUtils)
lambda <- 10^seq(10,-2,length.out=100)
glmnet(Earnings.Per.Share ~ ., data=train)
library(glmnet)
library(glmnetUtils)
lambda <- 10^seq(10,-2,length.out=100)
ridge.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train)
ridge.cv$lambda
library(glmnet)
library(glmnetUtils)
ridge.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train)
ridge.model <- glmnet(Earnings.Per.Share ~ ., data=train, lambda=ridge.cv$lambda.min)
ridge.pred <- predict(ridge.model, newdata=test)
print(paste('test MSE=', mean((test.eps-ridge.pred)^2)))
lasso.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=1)
lasso.model <- glmnet(Earnings.Per.Share ~ ., data=train, lambda=lasso.cv$lambda.min, alpha=1)
lasso.pred <- predict(lasso.model, newdata=test)
print(paste('test MSE=', mean((test.eps-lasso.pred)^2)))
library(glmnet)
library(glmnetUtils)
ridge.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=0)
ridge.model <- glmnet(Earnings.Per.Share ~ ., data=train, lambda=ridge.cv$lambda.min, alpha=0)
ridge.pred <- predict(ridge.model, newdata=test)
print(paste('test MSE=', mean((test.eps-ridge.pred)^2)))
lasso.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=1)
lasso.model <- glmnet(Earnings.Per.Share ~ ., data=train, lambda=lasso.cv$lambda.min, alpha=1)
lasso.pred <- predict(lasso.model, newdata=test)
print(paste('test MSE=', mean((test.eps-lasso.pred)^2)))
predict(lasso.model, type="coefficients")
predict(lasso.model, type="coefficients", s=lasso.cv$lambda.min)
predict(lasso.model, type="coefficients", newdata=test)
lasso.coef <- predict(lasso.model, type="coefficients", newdata=test)
View(lasso.pred)
View(ridge.pred)
View(lasso.cv)
View(lasso.coef)
lasso.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=1)
plot(cv.glmnet)
lasso.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=1)
plot(lasso.cv)
lasso.model <- glmnet(Earnings.Per.Share ~ ., data=train, lambda=lasso.cv$lambda.min, alpha=1)
lasso.pred <- predict(lasso.model, newdata=test)
print(paste('test MSE=', mean((test.eps-lasso.pred)^2)))
lasso.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=1)
plot(lasso.cv)
lasso.model <- glmnet(Earnings.Per.Share ~ ., data=train, s=lasso.cv$lambda.min, alpha=1)
lasso.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=1)
plot(lasso.cv)
lasso.model <- glmnet(Earnings.Per.Share ~ ., data=train, lambda=lasso.cv$lambda.min, alpha=1)
lasso.pred <- predict(lasso.model, s=lasso.cv$lambda.min, newdata=test)
print(paste('test MSE=', mean((test.eps-lasso.pred)^2)))
View(lasso.pred)
lasso.coef <- predict(lasso.model, type="coefficients", newdata=test)
predict(lasso.model, type="coefficients", newdata=test)
dat$For.Year <- NULL
dat$Period.Ending <- NULL
dat$Ticker.Symbol <- NULL
sum(is.na(dat))
dat <- na.omit(dat)
sum(is.na(dat))
dat <- read.csv('fundamentals.csv', header=T)[1:100,]
colnames(dat)
dat$For.Year <- NULL
dat$Period.Ending <- NULL
dat$Ticker.Symbol <- NULL
sum(is.na(dat))
dat <- na.omit(dat)
sum(is.na(dat))
set.seed(435)
train.index <- sample(nrow(dat),50)
train <- dat[train.index,]
test <- dat[-train.index,]
test.eps <- test$Earnings.Per.Share
print(paste('n_train=', dim(train)[1]))
print(paste('p_train=', dim(train)[2]))
lm.model <- lm(data=train, Earnings.Per.Share~.)
lm.pred <- predict(lm.model, newdata=test)
print(paste('test MSE=',mean((test.eps-lm.pred)^2)))
library(glmnet)
library(glmnetUtils)
ridge.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=0)
ridge.model <- glmnet(Earnings.Per.Share ~ ., data=train, lambda=ridge.cv$lambda.min, alpha=0)
ridge.pred <- predict(ridge.model, newdata=test)
print(paste('test MSE=', mean((test.eps-ridge.pred)^2)))
lasso.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=1)
plot(lasso.cv)
lasso.model <- glmnet(Earnings.Per.Share ~ ., data=train, lambda=lasso.cv$lambda.min, alpha=1)
lasso.pred <- predict(lasso.model, s=lasso.cv$lambda.min, newdata=test)
print(paste('test MSE=', mean((test.eps-lasso.pred)^2)))
predict(lasso.model, type="coefficients", newdata=test)
lasso.coef <- predict(lasso.model, type="coefficients", newdata=test)
lasso.ceof[lasso.coef != 0]
lasso.coef <- predict(lasso.model, type="coefficients", newdata=test)
lasso.coef[lasso.coef != 0]
out <- glmnet(Earnings.Per.Share ~ ., data=train, alpha=1)
lasso.coef <- predict(out, type="coefficients", s=lasso.cv$lambda.min)
library(glmnet)
library(glmnetUtils)
grid <- 10^seq(10,-2,length=100)
ridge.model <- glmnet(Earnings.Per.Share ~ ., data=train, lambda=grid, alpha=0)
ridge.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=0)
ridge.pred <- predict(ridge.model, s=ridge.cv$lambda.min,newdata=test)
print(paste('test MSE=', mean((test.eps-ridge.pred)^2)))
lasso.model <- glmnet(Earnings.Per.Share ~ ., data=train, lambda=grid, alpha=1)
lasso.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=1)
lasso.pred <- predict(lasso.model, s=lasso.cv$lambda.min, newdata=test)
print(paste('test MSE=', mean((test.eps-lasso.pred)^2)))
out <- glmnet(Earnings.Per.Share ~ ., data=train, alpha=1)
lasso.coef <- predict(out, type="coefficients", s=lasso.cv$lambda.min)
lasso.coef <- predict(lasso.model, type="coefficients", s=lasso.cv$lambda.min)
lasso.coef <- predict(lasso.model, type="coefficients", s=lasso.cv$lambda.min)[1:20,]
out <- glmnet(x=dat[,-75]. y=dat[,75], alpha=1, lambda=grid)
out <- glmnet(x=dat[,-75], y=dat[,75], alpha=1, lambda=grid)
dat[,-75]
View(dat)
dat[1,75]
dat[1,74]
out <- glmnet(x=dat[,-74], y=dat[,74], alpha=1, lambda=grid)
out <- glmnet(Earnings.PerShare ~ ., data=dat, alpha=1, lambda=grid)
out <- glmnet(Earnings.Per.Share ~ ., data=dat, alpha=1, lambda=grid)
lasso.coef <- predict(out, type="coefficients", s=lasso.cv$lambda.min)
out <- glmnet(Earnings.Per.Share ~ ., data=dat, alpha=1, lambda=grid)
lasso.coef <- predict(out, type="coefficients", s=lasso.cv$lambda.min, newdata=dat)
lasso.coef[lasso.coef != 0]
out <- glmnet(Earnings.Per.Share ~ ., data=dat, alpha=1, lambda=grid)
lasso.coef <- predict(out, type="coefficients", s=lasso.cv$lambda.min, newdata=dat)
lasso.coef
out <- glmnet(Earnings.Per.Share ~ ., data=dat, alpha=1, lambda=grid)
lasso.coef <- predict(out, type="coefficients", s=lasso.cv$lambda.min, newdata=dat)
print(paste('The number of non-zero coefficient estimates is ', length(lasso.coef[lasso.coef!=0]))
out <- glmnet(Earnings.Per.Share ~ ., data=dat, alpha=1, lambda=grid)
lasso.coef <- predict(out, type="coefficients", s=lasso.cv$lambda.min, newdata=dat)
print(paste('The number of non-zero coefficient estimates is ', length(lasso.coef[lasso.coef!=0])))
out <- glmnet(Earnings.Per.Share ~ ., data=dat, alpha=1, lambda=grid)
lasso.coef <- predict(out, type="coefficients", s=lasso.cv$lambda.min, newdata=dat)
print(paste('The number of non-zero coefficient estimates is ', length(lasso.coef[lasso.coef!=0])))
install.packages("pls")
library(pls)
pcr.model <- pcr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
library(pls)
pcr.model <- pcr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
library(pls)
pcr.model <- pcr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
validationplot(pcr.model, val.type="MSEP")
pcr.model$ncomp
summary(pcr.model)
summary(pcr.model)$RMSEP
library(pls)
pcr.model <- pcr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
library(pls)
pcr.model <- pcr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
validationplot(pcr.model, val.type="MSEP")
library(pls)
pcr.model <- pcr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
validationplot(pcr.model, val.type="MSEP")
library(pls)
set.seed(435)
pcr.model <- pcr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
validationplot(pcr.model, val.type="MSEP")
summary(pcr.model)
library(pls)
set.seed(435)
pcr.model <- pcr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
validationplot(pcr.model, val.type="MSEP")
library(pls)
set.seed(391)
pcr.model <- pcr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
validationplot(pcr.model, val.type="MSEP")
summary(pcr.model)
library(pls)
set.seed(435)
pcr.model <- pcr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
validationplot(pcr.model, val.type="MSEP")
summary(pcr.model)
summary(pcr.model)
pcr.pred <- predict(pcr.model, test, ncomp=1)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=16)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=14)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=13)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=12)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=11)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=10)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=9)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=8)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=7)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=16)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=17)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=16)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=17)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=18)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=19)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=20)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=21)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=22)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=19)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=16)
mean((pcr.pred-test.eps)^2)
pcr.pred <- predict(pcr.model, test, ncomp=16)
print(paste('test MSE=', mean((test.eps-pcr.pred)^2)))
pcr.pred <- predict(pcr.model, test, ncomp=16)
print(paste('test MSE=', mean((test.eps-pcr.pred)^2)))
set.seed(435)
pls.model <- plsr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
validationplot(pls.model, val.type="MSEP")
set.seed(1)
pls.model <- plsr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
validationplot(pls.model, val.type="MSEP")
set.seed(435)
pls.model <- plsr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
validationplot(pls.model, val.type="MSEP")
set.seed(999)
pls.model <- plsr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
validationplot(pls.model, val.type="MSEP")
set.seed(1)
pls.model <- plsr(Earnings.Per.Share ~ ., data=train, scale=TRUE, validation="CV")
validationplot(pls.model, val.type="MSEP")
summary(pls.model)
pls.pred <- predict(pls.model, test, ncomp=1)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=2)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=3)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=4)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=5)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=6)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=7)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=8)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=9)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=10)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=11)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=12)
pls.pred <- predict(pls.model, test, ncomp=12)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=13)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=14)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=15)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/johnn/Documents/UW/SchoolWorks/2018Spring/STAT435/HW6')
dat <- read.csv('fundamentals.csv', header=T)[1:100,]
colnames(dat)
dat$For.Year <- NULL
dat$Period.Ending <- NULL
dat$Ticker.Symbol <- NULL
sum(is.na(dat))
dat <- na.omit(dat)
sum(is.na(dat))
print(paste('n=', dim(dat)[1]))
print(paste('p=', dim(dat)[2]))
set.seed(435)
train.index <- sample(nrow(dat),50)
train <- dat[train.index,]
test <- dat[-train.index,]
test.eps <- test$Earnings.Per.Share
print(paste('n_train=', dim(train)[1]))
print(paste('p_train=', dim(train)[2]))
lm.model <- lm(data=train, Earnings.Per.Share~.)
lm.pred <- predict(lm.model, newdata=test)
print(paste('test MSE=',mean((test.eps-lm.pred)^2)))
library(glmnet)
library(glmnetUtils)
grid <- 10^seq(10,-2,length=100)
ridge.model <- glmnet(Earnings.Per.Share ~ ., data=train, lambda=grid, alpha=0)
ridge.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=0)
ridge.pred <- predict(ridge.model, s=ridge.cv$lambda.min,newdata=test)
print(paste('test MSE=', mean((test.eps-ridge.pred)^2)))
lasso.model <- glmnet(Earnings.Per.Share ~ ., data=train, lambda=grid, alpha=1)
lasso.cv <- cv.glmnet(Earnings.Per.Share ~ ., data=train, alpha=1)
pls.pred <- predict(pls.model, test, ncomp=16)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=17)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=18)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=19)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=20)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=21)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=22)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=23)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=23)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=24)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=25)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=26)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=27)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=28)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=29)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=30)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=31)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=32)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=33)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=34)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=26)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=25)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=28)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=27)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=29)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=28)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
pcr.pred <- predict(pcr.model, test, ncomp=30)
print(paste('test MSE=', mean((test.eps-pcr.pred)^2)))
pcr.pred <- predict(pcr.model, test, ncomp=28)
print(paste('test MSE=', mean((test.eps-pcr.pred)^2)))
pcr.pred <- predict(pcr.model, test, ncomp=30)
print(paste('test MSE=', mean((test.eps-pcr.pred)^2)))
pcr.pred <- predict(pcr.model, test, ncomp=40)
print(paste('test MSE=', mean((test.eps-pcr.pred)^2)))
pcr.pred <- predict(pcr.model, test, ncomp=16)
print(paste('test MSE=', mean((test.eps-pcr.pred)^2)))
pls.pred <- predict(pls.model, test, ncomp=28)
print(paste('test MSE=', mean((test.eps-pls.pred)^2)))
beta0 <- 2
beta1 <- -1
beta2 <- 2
X <- seq(-3, 8, length=1000)
Y <- beta0 + beta1*b1(X) + beta2*b2(X)
b1 <- function(x) {
b1 <- 0
if (x > -1 && x <= 1) {
b1 <- b1 + 1
}
if (x > 1 && x <= 3) {
b1 <- b1 - (2 * x - 1)
}
return(b1)
}
b2 <- function(x) {
b2 <- 0
if (x > 3 && x <= 5) {
b2 <- b2 + (x + 1)
}
if (x > 5 && x <= 6) {
b2 <- b2 - 1
}
return(b2)
}
beta0 <- 2
beta1 <- -1
beta2 <- 2
X <- seq(-3, 8, length=1000)
Y <- beta0 + beta1*b1(X) + beta2*b2(X)
ggplot() + geom_line(X,Y)
beta0 <- 2
beta1 <- -1
beta2 <- 2
X <- seq(-3, 8, length=1000)
Y <- beta0 + beta1*b1(X) + beta2*b2(X)
ggplot() + geom_line(aes(X,Y))
2 * c(1,2,3)
beta0 <- 2
beta1 <- -1
beta2 <- 2
X <- seq(-3, 8, length=1000)
Y <- rep(NA, 1000)
for (i in 1:1000) {
Y[i] <- beta0 + beta1*b1(X[i]) + beta2*b2(X[i])
}
ggplot() + geom_line(aes(X,Y))
beta0 <- 2
beta1 <- -1
beta2 <- 2
X <- seq(-3, 8, length=1000)
Y <- rep(NA, 1000)
for (i in 1:1000) {
Y[i] <- beta0 + beta1*b1(X[i]) + beta2*b2(X[i])
}
ggplot() + geom_line(aes(X,Y)) + annotate("text", x=-1.5, y=2.5, label="Y=2")
beta0 <- 2
beta1 <- -1
beta2 <- 2
X <- seq(-3, 8, length=1000)
Y <- rep(NA, 1000)
for (i in 1:1000) {
Y[i] <- beta0 + beta1*b1(X[i]) + beta2*b2(X[i])
}
ggplot() + geom_line(aes(X,Y)) +
annotate("text", x=-1.5, y=2.5, label="Y=2")
ggplot() + geom_line(aes(X,Y)) +
annotate("text", x=-1.5, y=2.5, label="Y=2") +
annotate("text", x=0, y=2, label="Y=1") +
annotate("text", x=2, y=3, label="Y=2+(2X-1)=2X+1") +
annotate("text", x=4, y=10, label="Y=2+2(X+1)=2X+4") +
annotate("text", x=5.5, y=1, label="Y=0") +
annotate("text", x=7, y=2.5, label="Y=2")
ggplot() + geom_line(aes(X,Y)) +
annotate("text", x=-1.5, y=2.5, label="Y=2") +
annotate("text", x=0, y=2, label="Y=1") +
annotate("text", x=2, y=5, label="Y=2+(2X-1)=2X+1") +
annotate("text", x=4, y=11, label="Y=2+2(X+1)=2X+4") +
annotate("text", x=5.5, y=1, label="Y=0") +
annotate("text", x=7, y=2.5, label="Y=2")
library(ggplot2)
ggplot() + geom_histogram(aes(dat$Earnings.Per.Share), bins=30)
library(ggplot2)
ggplot() + geom_histogram(aes(dat$Earnings.Per.Share),
bins=30,
color="black",
fill="cornsilk3")
library(ggplot2)
ggplot() + geom_histogram(aes(dat$Earnings.Per.Share),
bins=30,
color="black",
fill="cornsilk3") +
xlabel('Earnings Per Share')
library(ggplot2)
ggplot() + geom_histogram(aes(dat$Earnings.Per.Share),
bins=30,
color="black",
fill="cornsilk3") +
xlab('Earnings Per Share')
library(ggplot2)
ggplot() + geom_histogram(aes(dat$Earnings.Per.Share),
bins=50,
color="black",
fill="cornsilk3") +
xlab('Earnings Per Share')
